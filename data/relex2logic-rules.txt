# relex2logic-rules.txt
#
# Rules for RelEx2Logic, format is:
# [NAME] {PRIORITY} <EXCLUSION> RelEx criteria1 & criteria2 & ... => Scheme function
#
# =====================================================================================================
# SENTENCE PREDICATE-ARGUMENT TEMPLATES (whose sceme-rules also handle who / what questions)
# =====================================================================================================

[BE] {3} <SVO, SV> _subj(be, $subj) & _obj(be, $obj) => (be-inheritance-rule $subj (get-instance-name $subj word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))

[COPULA] {2} <> _subj(_\%copula, $subj) & _obj(_\%copula, $obj) => (be-inheritance-rule $subj (get-instance-name $subj word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))

[SVIO1] {2} <SVO, SV> _iobj($verb, $iobj) & _obj($verb, $obj) & _subj($verb, $subj) => (SVIO-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index) $iobj (get-instance-name $iobj word_index sentence_index))

[SVIO2] {2} <SV, SVO> _subj($verb, $subj) & _obj($verb, $obj) & _obj(to, $iobj) => (SVIO-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index ) $iobj (get-instance-name $iobj word_index sentence_index))

[SVIO3] {2} <SVO, SV> _subj($verb, $subj) & _obj($verb, $obj) & to($verb, $iobj) => (SVIO-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index ) $iobj (get-instance-name $iobj word_index sentence_index))

[SVO] {3} <SV, SVIO1, SVIO2, SVIO3, BE, whichobjQ, whichsubjQ> _subj($verb, $subj) & _obj($verb, $obj) => (SVO-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))

[SV] {4} <SVO, SVIO1, SVIO2, SVIO3, BE, COPULA-YNQ, TOBE> _subj($verb, $subj) => (SV-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index))

[SP] {4} <ALLRULE3, whichpredadjQ> _predadj($subj, $predadj) => (SV-rule $subj (get-instance-name $subj word_index sentence_index) $predadj (get-instance-name $predadj word_index sentence_index))

[PREP] {5} <> _psubj($verb, $subj) & _pobj($verb, $obj) => (SVO-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))

[TOBE] {3} <SV> _to-be($verb, $adj) & _subj($verb, $subj) => (to-be-rule $verb (get-instance-name $verb word_index sentence_index) $adj (get-instance-name $adj word_index sentence_index) $subj (get-instance-name $subj word_index sentence_index))

# ======================================================================================================
# Speech acts (awaiting revision and implementation)
# =====================================================================================================
[IMPERATIVE] {1} <DECLARATIVE> tense($verb, imperative) => (imperative-rule interpretation_index)
[INTERROGATIVE] {1} <DECLARATIVE, TRUTHQUERY> QUERY-TYPE(_\$qVar, $query) => (interrogative-rule interpretation_index)
[TRUTHQUERY] {2} <DECLARATIVE, TRUTHQUERY> TRUTH-QUERY-FLAG($verb, T) => (truth-query-rule interpretation_index)
[DECLARATIVE] {3} <IMPERATIVE, INTERROGATIVE, TRUTHQUERY> pos(\., punctuation) => (declarative-rule interpretation_index)
#================================================================================================
# Question rules
#================================================================================================
# Yes / No (closed) question rules
#===========================================================================================================================
[COPULA-YNQ] {1} <PREDICATE-YNQ, BE, SV, SVO, SVIO1, SVIO2, SVIO3> TRUTH-QUERY-FLAG(be, T) & _subj(be, $subj) & _obj(be, $obj) => (cop-ynQ-rule $subj (get-instance-name $subj word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))
[PREDICATE-YNQ] {2} <COPULA-YNQ> TRUTH-QUERY-FLAG($verb, T) => (pred-ynQ-rule $verb (get-instance-name $verb word_index sentence_index))
#=================
# Where questions
#=================
[where-Q] {3} <wherecop-Q> QUERY-TYPE(_\$qVar, where) & _%atLocation($verb, _\$qVar) => (where-rule $verb (get-instance-name $verb word_index sentence_index))
[wherecop-Q] {2} <where-Q> QUERY-TYPE(_\$qVar, where) & _%atLocation(_\%copula, _\$qVar) & _subj(_\%copula, $s) => (wherecop-Q-rule $s (get-instance-name $s word_index sentence_index))
#================
# When questions
#================
[when-Q] {3} <whencop-Q, prepwhen-Q> QUERY-TYPE(_\$qVar, when) & _%atTime($verb, _\$qVar) => (when-rule $verb (get-instance-name $verb word_index sentence_index))
[whencop-Q] {2} <when-Q, prepwhen-Q> QUERY-TYPE(_\$qVar, when) & _%atTime(_\%copula, _\$qVar) & _subj(_\%copula, $s) => (whencop-Q-rule $s (get-instance-name $s word_index sentence_index))
#===============
# Why questions
#===============
[why-Q] {3} <whycop-Q> QUERY-TYPE(_\$qVar, why) & _%because($verb, _\$qVar) => (why-rule $verb (get-instance-name $verb word_index sentence_index))
[whycop-Q] {2} <why-Q> QUERY-TYPE(_\$qVar, why) & _%because(_\%copula, _\$qVar) & _subj(_\%copula, $subj) => (whycop-Q-rule $subj (get-instance-name $subj word_index sentence_index))
#===========================
# How of manner
#==========================
[how-Q] {3} <PREDICATE-YNQ> QUERY-TYPE(_\$qVar, how) & how($verb, _\$qVar) => (how-rule $verb (get-instance-name $verb word_index sentence_index))
#============================
# Predicative How
#============================
[howpredadj1-Q] {1} <how-q> QUERY-TYPE(_\$qVar, how) & how(_\%copula, _\$qVar) & _subj(_\%copula, $s) => (howpredadj-Q-rule $s (get-instance-name $s word_index sentence_index))
[howpredadj2-Q] {1} <how-q> QUERY-TYPE(_\$qVar, how) & _subj(_\$qVar, $s) => (howpredadj-Q-rule $s (get-instance-name $s word_index sentence_index))
#===================
# How of quantity
#===================
[howquantQ] {1} <SVO> QUERY-TYPE(_\$qVar, how_much) & _quantity($x, _\$qVar) => (howquantQ-rule $x (get-instance-name $x word_index sentence_index))
#===================
# How of degree 
#===================
[howdegQ] {1} <SV> QUERY-TYPE(_\$qVar, how_much) & _%howdeg($pred, _\$qVar) => (howdegQ-rule $pred (get-instance-name $pred word_index sentence_index))
#=============================================
# CHOICE-TYPE QUESTIONS
#=============================================
[whichobjQ] {1} <SVO, SV, QDET, QDETPREDADJ> QUERY-FLAG($o, T) & _obj($v, $o) & _subj($v, $s) & _det($o, _\$qVar) => (whichobjQ-rule $o (get-instance-name $o word_index sentence_index) $v (get-instance-name $v word_index sentence_index) $s (get-instance-name $s word_index sentence_index))
[whichsubjQ] {1} <SV, SVO, QDET, QDETPREDADJ> QUERY-FLAG($s, T) & _subj($v, $s) & _obj($v, $o) & _det($s, _\$qVar) => (whichsubjQ-rule $s (get-instance-name $s word_index sentence_index) $v (get-instance-name $v word_index sentence_index) $o (get-instance-name $o word_index sentence_index))
[whichpredadjQ] {1} <SVP, SV, QDET, QDETPREDADJ> QUERY-FLAG($s, T) & _predadj($s, $pred) & _det($s, _\$qVar) => (whichpredadjQ-rule $s (get-instance-name $s word_index sentence_index) $pred (get-instance-name $pred word_index sentence_index))
[whichiobjQ] {1} <SVO, SV, SVIO3, QDET, QDETPREDADJ> QUERY-FLAG($io, T) & _obj($v, $o) & _subj($v, $s) & to($v, $io) & _det($io, _\$qVar) => (whichiobjQ-rule $s (get-instance-name $s word_index sentence_index) $v (get-instance-name $v word_index sentence_index) $o (get-instance-name $o word_index sentence_index) $io (get-instance-name $io word_index sentence_index))
#==================================
#determiner-question-word-questions
#==================================
[QDET] {2} <> _det($noun, _\$qVar) & QUERY-TYPE(_\$qVar, $qtype) & QUERY-FLAG($noun, T) & $prep($verb, $noun) => (q-det-rule $noun (get-instance-name $noun word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $qtype)
[QDETPREDADJ] {2} <> _det($noun, _\$qVar) & QUERY-TYPE(_\$qVar, $qtype) & _predadj($subj, $verb) => (q-det-rule $noun (get-instance-name $noun word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $qtype)
#=============================================
# END OF QUESTION RULES!
#=============================================

# ============================================
# adjective, adverb rules
# ============================================
[AMOD] {3} <> _amod($N, $A) => (amod-rule $N (get-instance-name $N word_index sentence_index) $A (get-instance-name $A word_index sentence_index))

[ADVMOD] {4} <> _advmod($V, $ADV) => (advmod-rule $V (get-instance-name $V word_index sentence_index) $ADV (get-instance-name $ADV word_index sentence_index))

# ============================================
# unary rules
# ============================================
[ENTITYFLAG] {2} <> entity-FLAG($x, T) => (entity-rule $x (get-instance-name $x word_index sentence_index))

[GENDER] {2} <> person-FLAG($x, T) & gender($x, $gender) => (gender-rule $x (get-instance-name $x word_index sentence_index) $gender)

[TENSEPOS] {5} <> tense($x, $Tense) & pos($x, verb) => (tense-rule $x (get-instance-name $x word_index sentence_index) $Tense)

[DET] {6} <> _det($noun, $det) & definite-FLAG($noun, T) => (det-rule $noun (get-instance-name $noun word_index sentence_index) $det (get-instance-name $det word_index sentence_index))

# Example: "I do not eat injera.", "The cat is not small."
[NEGFLAG] {7} <> NEGATIVE-FLAG($x, T) & pos($x, $x_POS) => (negative-rule (get-instance-name $x word_index sentence_index) $x_POS)

# for definite words
[DEFINITE] {8} <> definite-FLAG($A, T) => (definite-rule $A (get-instance-name $A word_index sentence_index))

# maybe rule documented on http://wiki.opencog.org/w/RelEx2Logic_Rules#Maybe_Rule
# Example: "Maybe she eats lunch.", "Perhaps she is nice."
[MAYBE] {3} <ADVMOD> _advmod($x, (maybe|possibly|perhaps|probably)) => (maybe-rule $x (get-instance-name $x word_index sentence_index))


# ============================================
# misc rules
# ============================================
[NUM] {1} <> _num_quantity($iobj, $Num) => (number-rule $iobj (get-instance-name $iobj word_index sentence_index) $Num (get-instance-name $Num word_index sentence_index))

[ABOUT] {2} <> about($V, $N) => (about-rule $V (get-instance-name $V word_index sentence_index) $N (get-instance-name $N word_index sentence_index))

[PRENOMINAL] {1} <> _nn($N1, $N2) => (nn-rule $N1 (get-instance-name $N1 word_index sentence_index) $N2 (get-instance-name $N2 word_index sentence_index))

[POSS] {8} <> _poss($N, $iobj) => (possessive-rule $N (get-instance-name $N word_index sentence_index) $iobj (get-instance-name $iobj word_index sentence_index))


# ============================================
# "to do" rules
# ============================================
# Example: "She wants to help John."
[TODO1] {1} <TODO2> _to-do($V1, $V2) & _obj($V2, $O) & _subj($V1, $S) => (to-do-rule-1 $V1 (get-instance-name $V1 word_index sentence_index) $V2 (get-instance-name $V2 word_index sentence_index) $S (get-instance-name $S word_index sentence_index) $O (get-instance-name $O word_index sentence_index))

# Example: "She wants you to help John."
[TODO2] {1} <TODO1> _to-do($V1, $V2) & _obj($V2, $O) & _subj($V1, $S1) & _subj($V2, $S2) => (to-do-rule-2 $V1 (get-instance-name $V1 word_index sentence_index) $V2 (get-instance-name $V2 word_index sentence_index) $S1 (get-instance-name $S1 word_index sentence_index) $S2 (get-instance-name $S2 word_index sentence_index) $O (get-instance-name $O word_index sentence_index))

# Example: "She wants to sing."
[TODO5] {2} <TODO1, TODO2> _to-do($V1, $V2) & _subj($V1, $S) => (to-do-rule-5 $V1 (get-instance-name $V1 word_index sentence_index) $V2 (get-instance-name $V2 word_index sentence_index) $S (get-instance-name $S word_index sentence_index))

# Example: "She must be able to sing."
[TODO4] {1} <TODO3> _to-do(able, $V1) & _predadj($V2, able) => (to-do-rule-4 $V1 (get-instance-name $V1 word_index sentence_index) $V2 (get-instance-name $V2 word_index sentence_index))

# Example: "She is nice to help with the project."
[TODO3] {2} <TODO4> _to-do($V1, $V2) & _predadj($V3, $V1) => (to-do-rule-3 $V1 (get-instance-name $V1 word_index sentence_index) $V2 (get-instance-name $V2 word_index sentence_index) $V3 (get-instance-name $V3 word_index sentence_index))


# ============================================
# all rules
#
# "All Canadians are right-handed."
# "All my writings are bad.",
# "All Canadians give their dogs a hug."
# "All Canadians write."
# "All right-handed Canadians write."
# ============================================
[ALLRULE1] {1} <> _quantity($noun, all) => (all-rule (get-instance-name $noun word_index sentence_index))

[ALLRULE2] {1} <> _predet($noun, all) => (all-rule (get-instance-name $noun word_index sentence_index))


# ============================================
# passive verb rules
# ============================================
# SVIO equivalent for passive sentence
[PASSIVE3] {1} <PASSIVE(.*)> _obj($verb,$obj) & by($verb,$subj) & to($verb,$iobj) & tense($verb, (.*)passive) => (passive-rule3 $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index ) $iobj (get-instance-name $iobj word_index sentence_index))

# SVO equivalent
[PASSIVE1] {2} <PASSIVE(.*)> _obj($A,$B) & by($A,$C) & tense($A, (.*)passive) => (passive-rule1 $A (get-instance-name $A word_index sentence_index) $B (get-instance-name $B word_index sentence_index) $C (get-instance-name $C word_index sentence_index))

# SV equivalent
[PASSIVE2] {3} <PASSIVE(.*)> _obj($A,$B) & tense($A, (.*)passive) => (passive-rule2 $A (get-instance-name $A word_index sentence_index) $B (get-instance-name $B word_index sentence_index))


# ============================================
# conjunction rules
# ============================================
# Example: "I did my homework, and I went to school."
# Example: "John and Madison eat the cake."
[AND] {1} <> conj_and($var1, $var2) & pos($var1, $pos) & pos($var2, $pos) => (and-rule $var1 (get-instance-name $var1 word_index sentence_index) $var2 (get-instance-name $var2 word_index sentence_index) $pos)

[BUT] {1} <> conj_but($var1, $var2) & pos($var1, $pos) & pos($var2, $pos) => (but-rule $var1 (get-instance-name $var1 word_index sentence_index) $var2 (get-instance-name $var2 word_index sentence_index) $pos)

[OR] {1} <> conj_or($var1, $var2) & pos($var1, $pos) & pos($var2, $pos) => (or-rule $var1 (get-instance-name $var1 word_index sentence_index) $var2 (get-instance-name $var2 word_index sentence_index) $pos)

# ============================================
# that rules for object clause, content clause, complement clause, etc, but not adjective clause
# ============================================
# skipping adjective clause
[THAT-EXCL-1] {100} <> that($A, $B) & pos($A, noun) => '() ; ignoring adjective clause between $A and $B 
[THAT-EXCL-2] {100} <> that($A, $B) & pos($B, noun) => '() ; ignoring adjective clause between $A and $B 

# general that-rule works for any pos
[THAT1] {110} <THAT-EXCL-1, THAT-EXCL-2> that($A, $B) => (that-rule $A (get-instance-name $A word_index sentence_index) $B (get-instance-name $B word_index sentence_index))
[THAT2] {110} <THAT-EXCL-1, THAT-EXCL-2> _that($A, $B) => (that-rule $A (get-instance-name $A word_index sentence_index) $B (get-instance-name $B word_index sentence_index))


# ============================================
# time rules for dealing with temporal expressions
# ============================================
[BEFORE] {100} <> before($subj, $verb) & pos($verb, $verb_pos) => (before-after-rule (get-instance-name $subj word_index sentence_index) (get-instance-name $verb word_index sentence_index) $verb_pos "before")
[AFTER] {100} <> after($subj, $verb) & pos($verb, $verb_pos) => (before-after-rule (get-instance-name $subj word_index sentence_index) (get-instance-name $verb word_index sentence_index) $verb_pos "after")
[TIME] {100} <> _time($period, $hour) & at($verb, $period) => (time-rule $hour $period (get-instance-name $verb word_index sentence_index))

# ===================================================
# Old redundant but functional question rules
# ===================================================
#[prepobj-YNQ] {1} <SV> TRUTH-QUERY-FLAG($verb, T) & _psubj($verb, $subj) & _pobj($verb, $obj) => (prepobj-ynQ-rule $subj (get-instance-name $subj word_index sentence_index) 
#$verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))
#[SVIO-ynQ] {1} <SVO-ynQ, SV-ynQ, SVIO, SVO> TRUTH-QUERY-FLAG($verb|$obj, T) & _subj($verb, $subj) & _obj($verb, $obj) & _iobj($verb, $iobj) => (SVIO-ynQ-rule $subj (get-
#instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index) $iobj (get-
#instance-name $iobj word_index sentence_index))
#[SVO-ynQ] {2} <SV-ynQ, SVO, SV> TRUTH-QUERY-FLAG($verb, T) & _subj($verb, $subj) & _obj($verb, $obj) => (SVO-ynQ-rule $subj (get-instance-name $subj word_index #sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))
#[SV-ynQ] {3} <SV> TRUTH-QUERY-FLAG($verb, T) & _subj($verb, $subj) => (SV-ynQ-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb #word_index sentence_index))
#=======================================================================================================================================
# Q-word questions
#=======================================================================================================================================
# Questioned subjecT (NB: these 6 rules send to 3 'whowhat' scheme-helpers)
#=======================================================================================================================================
# WHO SUBJECT
#===============================================================
#[whosubj-SVIO-Q] {1} <whosubj-SVO-Q, whosubj-SV-Q, SVO, SV, SVIO> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, who) & _subj($verb, _\$qVar) & _obj($verb, $z) &
#_iobj($verb, $iobj) => (whowhatsubj-SVIO-Q-rule $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index) $iobj (get-
#instance-name $iobj word_index sentence_index))
#[whosubj-SVO-Q] {2} <whosubj-SV-Q, SVO, SV> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, who) & _subj($verb, _\$qVar) & _obj($verb, $obj) => (whowhatsubj-SVO-Q-rule 
#$verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))
#[whosubj-SV-Q] {3} <SV> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, who) & _subj($verb, _\$qVar) => (whowhatsubj-SV-Q-rule $verb (get-instance-name $verb 
#word_index sentence_index))
#[whopsubj-Q] {3} <SV> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, who) & _psubj($p, _\$qVar) & _pobj($p, $o) => (whowhatpsubj-Q-rule $p (get-instance-name $p 
#word_index sentence_index) $o (get-instance-name $o word_index sentence_index))
#===============================================================
# WHAT SUBJECT
#===============================================================
#[whatsubj-SVIO-Q] {1} <whatsubj-SVO-Q, whatsubj-SV-Q, SV, SVO, SVIO> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, what) & _subj($verb, _\$qVar) & _obj($verb, $obj)
# & _iobj($verb, $iobj) => (whowhatsubj-SVIO-Q-rule $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index) $iobj
#(get-instance-name $iobj word_index sentence_index))
#[whatsubj-SVO-Q] {2} <whatsubj-SV-Q, SVO> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, what) & _subj($verb, _\$qVar) & _obj($verb, $obj) => (whowhatsubj-SVO-Q-rule #
#$verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))
#[whatsubj-SV-Q] {3} <SV> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, what) & _subj($verb, _\$qVar) => (whowhatsubj-SV-Q-rule $verb (get-instance-name $verb 
#word_index sentence_index))
#[whatpsubj-Q] {3} <SV> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, what) & _psubj($p, _\$qVar) & _pobj($p, $o) => (whowhatpsubj-Q-rule $p (get-instance-name $p 
#word_index sentence_index) $o (get-instance-name $o word_index sentence_index))
#==========================================================================================================
# Questioned object or indirect object (NB: these 6 rules send to 2 'whowhat' scheme helpers)
#==========================================================================================================
# WHO OBJECT
#=============================
#[whoobj-Q] {2} <whosubj-SV-Q, SV, SVO> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, who) & _subj($verb, $subj) & _obj($verb, _\$qVar) => (whowhatobj-Q-rule $subj 
#(get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index))
#============================
# WHO INDIRECT OBJECT
#============================
#[whoiobj-Q1] {1} <SVO, whosubj-SV-Q, whosubj-SVO-Q> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, who) & _subj($verb, $subj) & _obj($verb, $obj) & _iobj($verb, _\
#$qVar) => (whowhatiobj-Q-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name 
#$obj word_index sentence_index ))
#=============================
# WHAT Object
#=============================
#[whatobj-Q] {2} <SVO, SV> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, what) & _subj($verb, $subj) & _obj($verb, _\$qVar) => (whowhatobj-Q-rule $subj (get-instance-
#name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index))
#=============================
# WHAT Indirect Object
#============================
#[whatiobj-Q] {1} <SVIO, whatsubj-SV-Q, whatsubj-SVO-Q> interrogative-FLAG(_\$qVar, T) & QUERY-TYPE(_\$qVar, what) & _subj($verb, $subj) & _obj($verb, $obj) & _iobj($verb, _\
#$qVar) => (whowhatiobj-Q-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name 
#$obj word_index sentence_index))
# WHERE
#[whereSVIO-Q] {1} <SVIO, SVO, SV, whereSVO-Q, whereSV-Q> QUERY-TYPE(_\$qVar, where) & _%atLocation($verb, _\$qVar) & _subj($verb, $subj) & _obj($verb, $obj) & _iobj($verb, #
#$iobj) => (where-SVIOQ-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj 
#word_index sentence_index) $iobj (get-instance-name $iobj word_index sentence_index))
#[whereSVO-Q] {2} <SVO, SV, whereSV-Q> QUERY-TYPE(_\$qVar, where) & _%atLocation($verb, _\$qVar) & _subj($verb, $subj) & _obj($verb, $obj) => (where-SVOQ-rule $subj (get-
#instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))
# WHEN
#[whenSVIO-Q] {1} <whenSV-Q, whenSVO-Q, SVIO, SVO, SV> QUERY-TYPE(_\$qVar, when) & _%atTime($verb, _\$qVar) & _subj($verb, $subj) & _obj($verb, $obj) & _iobj($verb, $iobj) 
#=> (when-SVIOQ-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj 
#word_index sentence_index) $iobj (get-instance-name $iobj word_index sentence_index))
#[whenSVO-Q] {2} <whenSV-Q, whenSVO-Q, SVO, SV> QUERY-TYPE(_\$qVar, when) & _%atTime($verb, _\$qVar) & _subj($verb, $subj) & _obj($verb, $obj) => (when-SVOQ-rule $subj (get-
#instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))
# WHY
#[whySVIO-Q] {1} <whySVO-Q, whySV-Q, SVIO, SVO, SV> QUERY-TYPE(_\$qVar, why) & _%because($verb, _\$qVar) & _subj($verb, $subj) & _obj($verb, $obj) & _iobj($verb, $iobj) => 
#(why-SVIOQ-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index 
#sentence_index) $iobj (get-instance-name $iobj word_index sentence_index))
#[whySVO-Q] {2} <whySV-Q, SVO, SV> QUERY-TYPE(_\$qVar, why) & _%because($verb, _\$qVar) & _subj($verb, $subj) & _obj($verb, $obj) => (why-SVOQ-rule $subj (get-instance-name 
#$subj word_index sentence_index) $verb (get -instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))
# HOW
#[howSVIO-Q] {1} <howSV-Q, howSVO-Q, SVIO, SVO, SV, SVIO-ynQ> QUERY-TYPE(_\$qVar, how) & how($verb, _\$qVar) & _subj($verb, $subj) & _obj($verb, $obj) & _iobj($verb, $iobj) 
#=> (how-SVIOQ-rule $subj (get-instance-name $subj word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj 
#word_index sentence_index) $iobj (get-instance-name $iobj word_index sentence_index))
#[howSVO-Q] {2} <SVO, SV, howSV-Q> QUERY-TYPE(_\$qVar, how) & how($verb, _\$qVar) & _subj($verb, $subj) & _obj($verb, $obj) => (how-SVOQ-rule $subj (get-instance-name $subj 
#word_index sentence_index) $verb (get-instance-name $verb word_index sentence_index) $obj (get-instance-name $obj word_index sentence_index))


